{"version":3,"sources":["components/Bookmarks.js","components/Login.js","components/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Bookmarks","location","useLocation","classes","useStyles","history","useHistory","urlCheck","RegExp","React","useState","newName","setNewName","newLink","setNewLink","invokeUrl","showFolderButtons","setShowFolderButtons","showBookmarkButtons","setShowBookmarkButtons","showCreateFolderModal","setShowCreateFolderModal","showCreateBookmarkModal","setShowCreateBookmarkModal","showRenameFolderModal","setShowRenameFolderModal","showEditBookmarkModal","setShowEditBookmarkModal","showMoveBookmarkModal","setShowMoveBookmarkModal","createOrAddFlag","setCreateOrAddFlag","selectedFolderId","setSelectedFolderId","selectedRenameFolderId","setSelectedRenameFolderId","selectedBookmarkId","setSelectedBookmarkId","id","name","type","folderIndex","clipboard","setClipboard","folders","setFolders","useEffect","fetch","state","userId","then","res","json","data","console","log","undefined","replace","navigateToBookmark","url","window","open","handleBookmarkClick","e","bookmarkIndex","createFolder","startsWith","alert","Axios","post","catch","error","updateName","target","value","updateLink","renameFolder","put","editBookmark","test","moveBookmark","delete","renderBookmarks","eachFolder","List","component","disablePadding","map","eachBookmark","ListItem","button","className","nested","selected","onClick","ListItemIcon","ListItemText","primary","secondary","onDoubleClick","title","mainDiv","foldersDiv","aria-labelledby","root","temp","handleFolderClick","Collapse","in","timeout","unmountOnExit","nestedroot","actionsDiv","Button","color","actionButton","variant","Modal","show","onHide","Header","style","display","textAlign","Title","Body","TextField","label","onChange","Footer","modalButton","defaultValue","height","overflow","userName","logoutButton","makeStyles","theme","position","left","top","transform","width","marginTop","border","borderRadius","maxWidth","backgroundColor","palette","background","paper","paddingLeft","spacing","modal","alignItems","justifyContent","moveBookmarkModal","boxShadow","shadows","padding","margin","right","Login","props","username","setUsername","password","setPassword","styling","textField","axios","get","push","marginBottom","Signup","length","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.40cf2bf6.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport {Button} from '@material-ui/core';\r\nimport { Modal } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {TextField} from '@material-ui/core';\r\nimport {\r\n    useHistory,\r\n    useLocation\r\n  } from \"react-router-dom\";\r\nimport Axios from 'axios';\r\n// import axios from 'axios';\r\n\r\n\r\nexport default function Bookmarks() {\r\n  const location = useLocation();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const urlCheck =  new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n                              '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n                              '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n                              '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n                              '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n                              '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n\r\n  const [newName, setNewName] = React.useState(null); //name variable used during rename of bookmarks and folders\r\n  const [newLink, setNewLink] = React.useState(null);\r\n  const [invokeUrl,setInvokeUrl] = React.useState(\"https://htli38r3g7.execute-api.us-east-1.amazonaws.com/test\")\r\n\r\n  // state variables to show/hide buttons and modals\r\n  const [showFolderButtons, setShowFolderButtons] = React.useState([true, null, null]);     // 1.Create 2.Delete 3.Rename\r\n  const [showBookmarkButtons, setShowBookmarkButtons] = React.useState([null, null, null, null, null]);   // 1.Create 2.Delete 3.Rename 4.Move\r\n  const [showCreateFolderModal, setShowCreateFolderModal] = React.useState(false);\r\n  const [showCreateBookmarkModal, setShowCreateBookmarkModal] = React.useState(false);\r\n  const [showRenameFolderModal, setShowRenameFolderModal] = React.useState(false);\r\n  const [showEditBookmarkModal, setShowEditBookmarkModal] = React.useState(false);\r\n  const [showMoveBookmarkModal, setShowMoveBookmarkModal] = React.useState(false);\r\n  const [createOrAddFlag, setCreateOrAddFlag] = React.useState(null);\r\n\r\n  // keeps track of selected bookmark and folder\r\n  const [selectedFolderId, setSelectedFolderId] = React.useState(0);\r\n  const [selectedRenameFolderId, setSelectedRenameFolderId] = React.useState(null);\r\n  const [selectedFolderName, setSelectedFolderName] = React.useState(null);\r\n\r\n  const [selectedBookmarkId, setSelectedBookmarkId] = React.useState(null);       // used in deletion of bookmark\r\n  const [selectedBookmarkName, setSelectedBookmarkName] = React.useState(null);\r\n  const [selectedBookmarkUrl, setSelectedBookmarkUrl] = React.useState(null);\r\n\r\n  \r\n  const [clipboard, setClipboard] = React.useState({id: null,\r\n                                                    name: null,\r\n                                                    type: null,\r\n                                                    folderIndex: null\r\n                                                });\r\n\r\n  // main folder data\r\n  const [folders, setFolders] = React.useState([\r\n    {\r\n      \"name\": \"root\",\r\n      \"bookmarks\" : [\r\n        {\r\n          \"bookmarkName\" : \"\",\r\n          \"bookmarkUrl\" : \"\",\r\n        }\r\n      ]\r\n    },\r\n  ]);\r\n\r\n\r\n  // API call to get folders \r\n  useEffect(() => {\r\n    \r\n    fetch(invokeUrl+'/folders?username='+location.state.userId)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        setFolders(data);\r\n        console.log(data);\r\n    })\r\n  }, [])\r\n\r\n  // Redirects to login if not a certified user.\r\n  if(location.state === undefined){\r\n    history.replace(\"/\");\r\n  }\r\n\r\n  const logout = () => {\r\n      history.replace('/');\r\n  }\r\n\r\n  // Open a new tab of the bookmark\r\n  const navigateToBookmark = (url) => {\r\n    window.open(\"http://\"+url);\r\n  }\r\n\r\n  // on click event for folder (set selected) and open the folder\r\n  const handleFolderClick = (e, folderIndex) => {\r\n    setSelectedFolderId(folderIndex);\r\n    setSelectedBookmarkId(null);\r\n    setShowFolderButtons([true, true, true]);\r\n    setShowBookmarkButtons([true, false, false, false, true])\r\n    \r\n    let temp = folders\r\n    temp[folderIndex][\"open\"] = !temp[folderIndex][\"open\"]\r\n    setNewName(folders[folderIndex][\"name\"]);\r\n    setFolders(temp);\r\n  };\r\n  \r\n  // click event for bookmarks\r\n  const handleBookmarkClick = (e, bookmarkIndex, folderIndex) => {\r\n    console.log(folders[folderIndex][\"bookmarks\"][bookmarkIndex]);\r\n    \r\n    if(folderIndex !== \"root\") {\r\n        setShowFolderButtons([false, false, false]);\r\n        setShowBookmarkButtons([true, true, true, true, false]);\r\n    }\r\n    else {\r\n        setShowFolderButtons([true, false, false]);\r\n        setShowBookmarkButtons([false, true, true, true, true]);\r\n    }\r\n    setSelectedFolderId(folderIndex);\r\n    setSelectedBookmarkId(bookmarkIndex);\r\n    setNewName(folders[folderIndex][\"bookmarks\"][bookmarkIndex][\"bookmarkName\"]);\r\n    setNewLink(folders[folderIndex][\"bookmarks\"][bookmarkIndex][\"bookmarkUrl\"]);\r\n  };\r\n\r\n  // Functions for creating bookmarks and folders.\r\n  const createFolder = (e) => {\r\n    if(newName.startsWith(\" \")){\r\n      window.alert(\"Invalid folder name.\")\r\n    }\r\n    else {\r\n      Axios.post(invokeUrl+\"/folders?folderName=\"+newName+\"&username=\"+location.state.userId)\r\n      .then(res => {\r\n        // let tempFolders = folders;\r\n        // tempFolders[res.data] = {\r\n        //   \"bookmarks\" : {},\r\n        //   \"name\" : newName,\r\n        //   \"open\": false,\r\n        // }\r\n        if(res.data === \"invalid\") {\r\n          window.alert(\"Folder already exists!\")\r\n        }\r\n        else {\r\n          setFolders(res.data);\r\n        }\r\n        setShowCreateFolderModal(false);\r\n      }).catch(error=> {\r\n        console.log(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  const createBookmark = () => {\r\n    if(newName.startsWith(\" \")){\r\n      window.alert(\"Invalid folder name.\")\r\n    }\r\n    else if(!urlCheck.test(newLink)) {\r\n      window.alert(\"Invalid url\");\r\n    }\r\n    else {\r\n      Axios.post(invokeUrl+\"/bookmarks?folderName=root&bookmarkName=\"+newName+\"&bookmarkUrl=\"+newLink+\"&username=\"+location.state.userId)\r\n      .then(res => {\r\n        // let tempFolders = folders;\r\n        // tempFolders[\"root\"][\"bookmarks\"][res.data] = {\r\n        //   \"name\" : newName,\r\n        //   \"url\": newLink,\r\n        // }\r\n        if(res.data === \"Bookmark url already exists!\") {\r\n          window.alert(res.data)\r\n        }\r\n        else if(res.data === \"Bookmark name already exists!\") {\r\n          window.alert(res.data)\r\n        }\r\n        else {\r\n          setFolders(res.data);    \r\n        }\r\n        setShowCreateBookmarkModal(false);\r\n      }).catch(error=> {\r\n        console.log(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  const addBookmarkToFolder = (e) => {\r\n    if(newName.startsWith(\" \")){\r\n      window.alert(\"Invalid folder name.\")\r\n    }\r\n    else if(!urlCheck.test(newLink)) {\r\n      window.alert(\"Invalid url\");\r\n    }\r\n    else {\r\n      console.log(selectedFolderId);\r\n      Axios.post(invokeUrl+\"/bookmarks?folderName=\"+folders[selectedFolderId][\"name\"]+\"&bookmarkName=\"+newName+\"&bookmarkUrl=\"+newLink+\"&username=\"+location.state.userId)\r\n      .then(res => {\r\n        // let tempFolders = folders;\r\n        // tempFolders[selectedFolderId][\"bookmarks\"][res.data] = {\r\n        //   \"name\" : newName,\r\n        //   \"url\": newLink,\r\n        // }\r\n        // setFolders(tempFolders);    \r\n        if(res.data === \"Bookmark url already exists!\") {\r\n          window.alert(res.data)\r\n        }\r\n        else if(res.data === \"Bookmark name already exists!\") {\r\n          window.alert(res.data)\r\n        }\r\n        else {\r\n          setFolders(res.data);    \r\n        }\r\n        setShowCreateBookmarkModal(false);\r\n      }).catch(error=> {\r\n        console.log(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  const createFolderModal = () => (  \r\n    <Modal show={showCreateFolderModal} onHide={() => setShowCreateFolderModal(false)}>\r\n        <Modal.Header style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <Modal.Title>Create folder</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <TextField id=\"outlined-basic\" \r\n                        label=\"Enter new name:\" \r\n                        variant=\"outlined\"\r\n                        onChange = {updateName}/>\r\n        </Modal.Body>\r\n        <Modal.Footer style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <Button color = \"primary\" variant= \"outlined\" className = {classes.modalButton} onClick = {createFolder}>Ok</Button>\r\n            <Button color = \"secondary\" variant= \"outlined\" className = {classes.modalButton} onClick = {() => setShowCreateFolderModal(false)}>Cancel</Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n  )\r\n  \r\n  const createBookmarkModal = () => (\r\n    <Modal show={showCreateBookmarkModal} onHide={() => setShowCreateBookmarkModal(false)}>\r\n        <Modal.Header style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <Modal.Title>Create bookmark</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <TextField id=\"outlined-basic\" \r\n                        label=\"Enter new name:\" \r\n                        variant=\"outlined\"\r\n                        onChange = {updateName}/>\r\n                        <br/> <br/>\r\n            <TextField id=\"outlined-basic\" \r\n                        label=\"Enter new link url:\" \r\n                        variant=\"outlined\"\r\n                        onChange = {updateLink}/>\r\n        </Modal.Body>\r\n        <Modal.Footer style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <Button color = \"primary\" variant= \"outlined\" className = {classes.modalButton} onClick = {() => createOrAddFlag === 0? createBookmark(): addBookmarkToFolder()}>Ok</Button>\r\n            <Button color = \"secondary\" variant= \"outlined\" className = {classes.modalButton} onClick = {() => setShowCreateBookmarkModal(false)}>Cancel</Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n  )\r\n\r\n  //Functions for deleting folders and bookmarks\r\n  const deleteFolder = (e) => {\r\n    \r\n    Axios.delete(invokeUrl+\"/folders/?folderName=\"+folders[selectedFolderId][\"name\"]+\"&username=\"+location.state.userId)\r\n    .then(res => {\r\n      // console.log(res)\r\n      setFolders(res.data);\r\n    }).catch(error=> {\r\n      console.log(error)\r\n    })\r\n\r\n    // const newFolders = folders;\r\n    // delete newFolders[selectedFolderId];\r\n    setSelectedFolderId(null);\r\n    setShowBookmarkButtons([false, false, false ,false, true]);\r\n    setShowFolderButtons([true, false, false]);      \r\n\r\n    // setFolders(newFolders);\r\n    \r\n  }\r\n\r\n  const deleteBookmark = () => {\r\n    Axios.delete(invokeUrl+\"/bookmarks?bookmarkName=\"+folders[selectedFolderId][\"bookmarks\"][selectedBookmarkId][\"bookmarkName\"]+\"&folderName=\"+folders[selectedFolderId][\"name\"]+\"&username=\"+location.state.userId)\r\n    .then(res => {\r\n      // console.log(res);\r\n      // let tempFolders = folders\r\n      // delete tempFolders[selectedFolderId][\"bookmarks\"][selectedBookmarkId]\r\n      setFolders(res.data);\r\n      setSelectedBookmarkId(null);\r\n\r\n      if(folders[selectedFolderId][\"name\"] === \"root\") {\r\n          setShowBookmarkButtons([false, false, false ,false, true]);\r\n      }\r\n      else {\r\n          setShowBookmarkButtons([true, false, false ,false, true]);\r\n      }\r\n\r\n      // setFolders(tempFolders);   \r\n    }).catch(error=> {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  // Functions required for editing folders and bookmarks\r\n  const updateName = (e) => {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  const updateLink = (e) => {\r\n    setNewLink(e.target.value);\r\n  }\r\n\r\n  const renameFolder = () => {\r\n    if(newName.startsWith(\" \")){\r\n      window.alert(\"Invalid folder name.\")\r\n    }    \r\n    else{\r\n      Axios.put(invokeUrl+\"/folders?newFolderName=\"+newName+\"&folderName=\"+folders[selectedFolderId][\"name\"]+\"&username=\"+location.state.userId)\r\n      .then(res => {\r\n        setFolders(res.data);  \r\n      }).catch(error=> {\r\n        console.log(error)\r\n      })\r\n      \r\n      setShowRenameFolderModal(!showRenameFolderModal);\r\n    }\r\n    \r\n  }\r\n\r\n  const editBookmark = () => {\r\n    if(newName.startsWith(\" \")){\r\n      window.alert(\"Invalid folder name.\")\r\n    }\r\n    else if(!urlCheck.test(newLink)) {\r\n      window.alert(\"Invalid url\");\r\n    }\r\n    else {\r\n      Axios.put(invokeUrl+\"/bookmarks?folderName=\"+folders[selectedFolderId][\"name\"]+\"&bookmarkName=\"+folders[selectedFolderId][\"bookmarks\"][selectedBookmarkId][\"bookmarkName\"]+\"&newBookmarkName=\"+newName+\"&newBookmarkUrl=\"+newLink+\"&username=\"+location.state.userId)\r\n      .then(res => {\r\n        setFolders(res.data);\r\n      }).catch(error=> {\r\n        console.log(error)\r\n      })\r\n      // let tempFolders = folders;\r\n      // tempFolders[selectedFolderId][\"bookmarks\"][selectedBookmarkId][\"name\"] = newName;\r\n      // tempFolders[selectedFolderId][\"bookmarks\"][selectedBookmarkId][\"url\"] = newLink;\r\n      \r\n      // setFolders(folders);\r\n      \r\n      setShowEditBookmarkModal(!showEditBookmarkModal);\r\n    }\r\n    \r\n  }\r\n\r\n  const renameFolderModal = () => (  \r\n    <Modal show={showRenameFolderModal} onHide={() => setShowRenameFolderModal(false)}>\r\n        <Modal.Header style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <Modal.Title>Rename folder</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <TextField id=\"outlined-basic\" \r\n                        label=\"Enter new name:\" \r\n                        variant=\"outlined\"\r\n                        defaultValue = {newName} \r\n                        onChange = {updateName}/>\r\n        </Modal.Body>\r\n        <Modal.Footer style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <Button color = \"primary\" variant= \"outlined\" className = {classes.modalButton} onClick = {renameFolder}>Ok</Button>\r\n            <Button color = \"secondary\" variant= \"outlined\" className = {classes.modalButton} onClick = {() => setShowRenameFolderModal(false)}>Cancel</Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n  )\r\n  \r\n  const editBookmarkModal = () => {\r\n\r\n    return(\r\n      <Modal show={showEditBookmarkModal} onHide={() => setShowEditBookmarkModal(false)}>\r\n          <Modal.Header style = {{display: 'inline-block',\r\n                                  textAlign: 'center'}}>\r\n              <Modal.Title>Edit bookmark</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body style = {{display: 'inline-block',\r\n                                  textAlign: 'center'}}>\r\n              <TextField id=\"outlined-basic\" \r\n                          label=\"Enter new name:\" \r\n                          variant=\"outlined\"\r\n                          defaultValue = {newName}  \r\n                          onChange = {updateName}/>\r\n                          <br/> <br/>\r\n              <TextField id=\"outlined-basic\" \r\n                          label=\"Enter new link url:\" \r\n                          variant=\"outlined\"\r\n                          defaultValue = {newLink}  \r\n                          onChange = {updateLink}/>\r\n          </Modal.Body>\r\n          <Modal.Footer style = {{display: 'inline-block',\r\n                                  textAlign: 'center'}}>\r\n              <Button color = \"primary\" variant= \"outlined\" className = {classes.modalButton} onClick = {editBookmark}>Ok</Button>\r\n              <Button color = \"secondary\" variant= \"outlined\" className = {classes.modalButton} onClick = {() => setShowEditBookmarkModal(false)}>Cancel</Button>\r\n          </Modal.Footer>\r\n      </Modal>\r\n    )\r\n    \r\n  }\r\n\r\n  // Function required for moving bookmarks\r\n  const moveBookmark = () => {\r\n        \r\n    Axios.post(invokeUrl+\"/bookmarks?folderName=\"+folders[selectedRenameFolderId][\"name\"]+\"&bookmarkName=\"+clipboard[\"bookmarkName\"]+\"&bookmarkUrl=\"+clipboard[\"bookmarkUrl\"]+\"&username=\"+location.state.userId)\r\n    .then(res => {\r\n      // let tempFolders = folders;\r\n      // tempFolders[selectedRenameFolderId][\"bookmarks\"][res] = clipboard;\r\n      // setFolders(tempFolders);    \r\n    }).catch(error=> {\r\n      console.log(error)\r\n    })\r\n\r\n    console.log(selectedBookmarkId);\r\n    \r\n    Axios.delete(invokeUrl+\"/bookmarks?bookmarkName=\"+folders[selectedFolderId][\"bookmarks\"][selectedBookmarkId][\"bookmarkName\"]+\"&folderName=\"+folders[selectedFolderId][\"name\"]+\"&username=\"+location.state.userId)\r\n    .then(res => {\r\n      // let tempFolders = folders;\r\n      // delete tempFolders[selectedFolderId][\"bookmarks\"][selectedBookmarkId];\r\n      // setFolders(tempFolders);\r\n      setFolders(res.data);\r\n      console.log(res);\r\n      setShowMoveBookmarkModal(false);\r\n      setSelectedBookmarkId(null);\r\n    }).catch(error=> {\r\n      console.log(error);\r\n    })\r\n    \r\n  }\r\n \r\nconst copyAndShowMoveBookmarkModal = () => {\r\n  setClipboard(folders[selectedFolderId][\"bookmarks\"][selectedBookmarkId]);\r\n  setShowMoveBookmarkModal(true);\r\n}\r\n\r\n  const moveBookmarkModal = () => (\r\n    <Modal show={showMoveBookmarkModal} onHide={() => setShowMoveBookmarkModal(false)}>\r\n    <Modal.Header style = {{display: 'inline-block',\r\n                            textAlign: 'center'}}>\r\n        <Modal.Title>Move bookmark to</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body style = {{display: 'inline-block',\r\n                            textAlign: 'center', height: '25vh', overflow: 'auto'}}>\r\n        <List\r\n            component=\"nav\"\r\n            aria-labelledby=\"nested-list-subheader\"\r\n            className={classes.root}\r\n        >\r\n            {folders.map((eachFolder, folderIndex) => {\r\n                if(eachFolder[\"name\"] !== \"root\" && folders[selectedFolderId][\"name\"] !== eachFolder[\"name\"]) {\r\n                    return(\r\n                        <ListItem button className={classes.nested}\r\n                                selected = {selectedRenameFolderId === folderIndex} \r\n                                onClick = {(e) => setSelectedRenameFolderId(folderIndex)}>\r\n                            <ListItemIcon>\r\n                            <FolderIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary= {eachFolder[\"name\"]} />\r\n                        </ListItem>\r\n                    )\r\n                }\r\n                return(null);\r\n            })}\r\n        </List>\r\n        </Modal.Body>\r\n        <Modal.Footer style = {{display: 'inline-block',\r\n                                textAlign: 'center'}}>\r\n            <Button color = \"primary\" variant= \"outlined\" className = {classes.modalButton} onClick = {moveBookmark}>Ok</Button>\r\n            <Button color = \"secondary\" variant= \"outlined\" className = {classes.modalButton} onClick = {() => setShowMoveBookmarkModal(false)}>Cancel</Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n  )\r\n\r\n\r\n  //Rendering functions for the folders and bookmarks\r\n  const renderFolders = () => {\r\n    \r\n    return(folders.map((eachFolder, folderIndex) => {\r\n      if(eachFolder[\"name\"] !== \"root\") {\r\n          return(<List\r\n                component=\"nav\"\r\n                aria-labelledby=\"nested-list-subheader\"\r\n                className={classes.root}\r\n              >\r\n                <ListItem button selected={selectedFolderId === folderIndex} \r\n                                  onClick={(e) => handleFolderClick(e, folderIndex, null)}>\r\n                  <ListItemIcon>\r\n                    <FolderIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={eachFolder[\"name\"]} />\r\n                    {eachFolder[\"open\"] ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n\r\n              <Collapse in={eachFolder[\"open\"]} timeout=\"auto\" unmountOnExit>\r\n                {renderBookmarks(eachFolder, folderIndex)}       \r\n              </Collapse>\r\n              </List>);\r\n      } \r\n    }))\r\n  }\r\n  \r\n  const renderRootBookmarks = () => {\r\n    return(<List\r\n      component=\"nav\"\r\n      aria-labelledby=\"nested-list-subheader\"\r\n      className={classes.root}\r\n    >\r\n      {\r\n        folders.map((eachFolder, folderIndex) => {\r\n          if(eachFolder[\"name\"] === \"root\") {\r\n            return(\r\n              eachFolder[\"bookmarks\"].map((eachBookmark, bookmarkIndex) => (\r\n        \r\n                <ListItem button className={classes.nestedroot} \r\n                        selected = {selectedBookmarkId === bookmarkIndex && selectedFolderId === folderIndex} \r\n                        onClick = {(e) => handleBookmarkClick(e, bookmarkIndex, folderIndex)}>\r\n                    <ListItemIcon>\r\n                    <LinkIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary= {eachBookmark[\"bookmarkName\"]} \r\n                                  secondary = {eachBookmark[\"bookmarkUrl\"]}\r\n                                  onDoubleClick = {() => navigateToBookmark(eachBookmark[\"bookmarkUrl\"])}\r\n                                  />\r\n                </ListItem>))\r\n            )\r\n          }\r\n        })\r\n        }\r\n    </List>)\r\n  }\r\n\r\n  const renderBookmarks = (eachFolder, folderIndex) => (    \r\n    <List component=\"div\" disablePadding>\r\n      {eachFolder[\"bookmarks\"].map((eachBookmark, bookmarkIndex) => \r\n              <ListItem button className={classes.nested} \r\n                        selected = {selectedBookmarkId === bookmarkIndex && selectedFolderId === folderIndex} \r\n                        onClick = {(e) => handleBookmarkClick(e, bookmarkIndex, folderIndex)}>\r\n                <ListItemIcon>\r\n                  <LinkIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary= {eachBookmark[\"bookmarkName\"]} \r\n                              secondary = {eachBookmark[\"bookmarkUrl\"]}\r\n                              onDoubleClick = {() => navigateToBookmark(eachBookmark[\"bookmarkUrl\"])}\r\n                              />\r\n              </ListItem>\r\n      )}\r\n    </List>\r\n  );\r\n\r\n  // Main render function call\r\n  return (\r\n    <div>\r\n        <h1 className= {classes.title}>Bookmarks</h1>\r\n        <div className={classes.mainDiv}>\r\n            <div className = {classes.foldersDiv}>\r\n                {renderFolders()}\r\n                {renderRootBookmarks()}\r\n            </div>\r\n            <br/>\r\n            {/* Buttons to manipulate bookmarks and folders (will show and hide according to the variables) */}\r\n            <div className={classes.actionsDiv}>\r\n                <Button color = \"primary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => setShowCreateFolderModal(true)}>Create folder</Button>\r\n                {showBookmarkButtons[4] ? <Button color = \"primary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => {setShowCreateBookmarkModal(true); setCreateOrAddFlag(0)}}>Create bookmark</Button> : null}\r\n                {showBookmarkButtons[0] ? <Button color = \"primary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => {setShowCreateBookmarkModal(true); setCreateOrAddFlag(1)}}>Add bookmark to folder</Button> : null}\r\n                <br/>\r\n                {showFolderButtons[2] ? <Button color = \"primary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => setShowRenameFolderModal(true)}>Rename folder</Button> : null}\r\n                {showBookmarkButtons[2] ? <Button color = \"primary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => setShowEditBookmarkModal(true)}>Edit bookmark</Button> : null}\r\n                <br/>\r\n                {showBookmarkButtons[3] ? <Button color = \"primary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => copyAndShowMoveBookmarkModal()}>Move bookmark</Button> : null}\r\n                <br/>\r\n                {showFolderButtons[1] ? <Button color = \"secondary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => deleteFolder()}>Delete folder</Button> : null}\r\n                {showBookmarkButtons[1] ? <Button color = \"secondary\" className = {classes.actionButton} variant= \"outlined\" onClick = {() => deleteBookmark()}>Delete bookmark</Button> : null}\r\n            </div>\r\n\r\n            {createFolderModal()}\r\n            {createBookmarkModal()}\r\n            {renameFolderModal()}\r\n            {editBookmarkModal()}\r\n            {moveBookmarkModal()}\r\n        </div>\r\n        <h5 className ={classes.userName}>User: {location.state.userName}</h5>\r\n        <Button color = \"primary\" variant= \"contained\" className = {classes.logoutButton} onClick = {() => logout()}>Logout</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n//CSS for all the components\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainDiv: {\r\n      position: 'absolute', left: '50%', top: '60%',\r\n      transform: 'translate(-50%, -50%)',\r\n      // border: '1px solid black',\r\n      // borderRadius: '10px',\r\n      height: '95vh',\r\n      width: '95vw',\r\n      display: 'inline-block',\r\n      textAlign: 'center',\r\n  },\r\n  title: {\r\n      textAlign: 'center',\r\n      marginTop: '1vh'\r\n  },\r\n  foldersDiv: {\r\n      height: \"50vh\",\r\n      width: \"50vw\",\r\n      overflow: 'auto',\r\n      display: 'inline-block',\r\n      textAlign: 'center',\r\n      border: '1px solid black',\r\n      borderRadius: '10px'\r\n  },\r\n  actionsDiv: {\r\n      display: 'inline-block',\r\n      textAlign: 'center',\r\n  },\r\n  root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n      paddingLeft: theme.spacing(4),\r\n  },\r\n  nestedroot: {\r\n    paddingLeft: theme.spacing(4),\r\n    color: \"blue\",\r\n},\r\n  modal: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n  },\r\n  moveBookmarkModal: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n  },\r\n  paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      borderRadius: \"5px\",\r\n      height: \"200px\",\r\n      width: \"250px\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n  },\r\n  modalButton: {\r\n      margin: \"2vh\",\r\n  },\r\n  actionButton: {\r\n      margin: '10px',\r\n      position: 'relative',\r\n  },\r\n  userName: {\r\n      position: 'absolute',\r\n      left: '1vw',\r\n      top: '1vh',\r\n  },\r\n  logoutButton: {\r\n      position: 'absolute',\r\n      right: '1vw',\r\n      top: '1vh',\r\n  }\r\n}));\r\n","import React from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport {Button} from '@material-ui/core';\r\nimport {\r\n  useHistory\r\n} from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function Login(props){\r\n  const [username, setUsername ]= React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [invokeUrl,setInvokeUrl] = React.useState(\"https://ux48ih7dy5.execute-api.us-east-1.amazonaws.com/Test\")\r\n\r\n  const history = useHistory();\r\n\r\n  const updateUsername = (e) => {\r\n    setUsername(e.target.value);\r\n  }\r\n\r\n  const updatePassword = (e) => {\r\n    if(e.target.value !== 32){\r\n      setPassword(e.target.value);\r\n    }\r\n  }\r\n\r\n  const validateCredentials = (e) => {\r\n    if(/\\s/g.test(username) || username === \"\") {\r\n      window.alert(\"Enter a valid username.\")\r\n    } else if (/\\s/g.test(password) || password === \"\") {\r\n      window.alert(\"Enter a valid password.\")\r\n    }\r\n    else {\r\n      axios.get(invokeUrl+'/userauth?username='+username+'&password='+password)\r\n      .then(res => {\r\n        if(res.data !== username) {\r\n          window.alert(\"Invalid password!\");\r\n        }\r\n        else {\r\n          console.log(res.data);\r\n          history.push('/bookmarks', {userId: res.data, userName: username});\r\n        }\r\n        \r\n      }).catch(error => {\r\n          window.alert(\"Invalid credentials.\");\r\n          console.log(error);\r\n      }) \r\n    }\r\n  }\r\n\r\n  const goToSignup = (e) => {\r\n    history.push('/signup');\r\n  }\r\n\r\n  return(\r\n  <div style={styling.mainDiv}>\r\n    <h1>Bookmarker</h1>\r\n    <h2 style = {styling.title}> Login</h2>\r\n    <TextField id=\"outlined-basic\" \r\n                style = {styling.textField}\r\n                label=\"Username:\" \r\n                variant=\"outlined\" \r\n                onChange = {updateUsername}/>\r\n    <br/>            \r\n    <TextField id=\"outlined-basic\"\r\n                style = {styling.textField} \r\n                label=\"Password:\" \r\n                variant=\"outlined\" \r\n                type=\"password\"\r\n                onChange = {updatePassword}/>\r\n    <br/>\r\n    <Button style = {styling.button} \r\n            onClick={validateCredentials}\r\n            color = 'primary' \r\n            variant = 'contained'>Login</Button>\r\n    <br/>\r\n    <Button style = {styling.button} \r\n            color = 'primary' \r\n            onClick = {goToSignup}\r\n            variant = 'contained'>New user? Sign up</Button>\r\n    \r\n  </div>);\r\n}\r\n\r\n\r\n//Styling for the page\r\nconst styling = {\r\n  mainDiv: {\r\n    position: 'absolute', left: '50%', top: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    // border: '1px solid black',\r\n    borderRadius: '10px',\r\n    height: '48vh',\r\n    width: '60vh',\r\n    display: 'inline-block',\r\n    textAlign: 'center',\r\n  },\r\n  textField: {\r\n    marginBottom: '2vh',\r\n    marginTop: '2vh'\r\n  },\r\n  button: {\r\n    marginTop: '1vh'\r\n  },\r\n  title: {\r\n    marginTop: '1vh'\r\n  }\r\n};","import React from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport {Button} from '@material-ui/core';\r\nimport {\r\n  useHistory\r\n} from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function Signup(props){\r\n  const [username, setUsername ]= React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  // const [invokeUrl] = React.useState(\"https://nomvt8uagi.execute-api.us-east-1.amazonaws.com/dev\")\r\n  const [invokeUrl] = React.useState(\"https://ux48ih7dy5.execute-api.us-east-1.amazonaws.com/Test\")\r\n\r\n  const history = useHistory();\r\n\r\n  const updateUsername = (e) => {\r\n    setUsername(e.target.value);\r\n  }\r\n\r\n  const updatePassword = (e) => {\r\n    setPassword(e.target.value);\r\n  }\r\n\r\n  const createCredentials = (e) => {\r\n    if(/\\s/g.test(username) || username === \"\") {\r\n      window.alert(\"Enter a valid username.\")\r\n    } else if (/\\s/g.test(password) || password.length <= 4 || password === \"\") {\r\n      window.alert(\"Enter a valid password.\")\r\n    }\r\n    else {\r\n      const url = invokeUrl+\"/userauth?username=\"+username+\"&password=\"+password;\r\n      console.log(url); \r\n      axios.post(url)\r\n      .then(res => {\r\n        // history.push('/bookmarks', {userId: res.data, userName: username});\r\n        window.alert(\"Account created successfully. Login using credentials.\")\r\n        history.push(\"/\");\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  const goBackToLogin = () => {\r\n    history.push(\"/\", );\r\n  }\r\n\r\n  return(\r\n  <div style={styling.mainDiv}>\r\n    <h1 style = {styling.title}>Signup</h1>\r\n    <TextField id=\"outlined-basic\" \r\n                style = {styling.textField}\r\n                label=\"Username:\" \r\n                variant=\"outlined\" \r\n                onChange = {updateUsername}/>\r\n    <br/>            \r\n    <TextField id=\"outlined-basic\"\r\n                style = {styling.textField} \r\n                label=\"Password:\" \r\n                variant=\"outlined\" \r\n                type=\"password\"\r\n                onChange = {updatePassword}\r\n                />\r\n    <br/>\r\n    <Button style = {styling.button} \r\n            color = 'primary' \r\n            onClick = {createCredentials}\r\n            variant = 'contained'>Create account</Button>\r\n    <br/>\r\n    <Button style = {styling.button} \r\n            color = 'primary' \r\n            onClick = {goBackToLogin}\r\n            variant = 'contained'>Go back to login</Button>\r\n\r\n  </div>);\r\n}\r\n\r\n\r\n//Styling for the page\r\nconst styling = {\r\n  mainDiv: {\r\n    position: 'absolute', left: '50%', top: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    border: '1px solid black',\r\n    borderRadius: '10px',\r\n    height: '48vh',\r\n    width: '60vh',\r\n    display: 'inline-block',\r\n    textAlign: 'center',\r\n  },\r\n  textField: {\r\n    marginBottom: '2vh',\r\n    marginTop: '2vh'\r\n  },\r\n  button: {\r\n    marginTop: '1vh'\r\n  },\r\n  title: {\r\n    marginTop: '1vh'\r\n  }\r\n};","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory\n} from \"react-router-dom\";\nimport Bookmarks from './components/Bookmarks';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\n\n\nexport default function App(){\n  const history = useHistory();\n\n  return(\n    <Router history = {history}>\n    <Switch>\n        <Route exact path=\"/\" component={props => <Login />}/>\n\n        <Route path=\"/bookmarks\" component={props => <Bookmarks />}/>\n        \n        <Route path=\"/signup\" component={props => <Signup />}/>\n        \n      </Switch>\n    </Router>\n    );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}